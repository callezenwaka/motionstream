# config/default_config.yaml
# Python Dependency Security Assistant Configuration

# Feature toggles
features:
  vulnerability_scan: true    # Scan for known vulnerabilities (CVEs, etc.)
  name_similarity: true       # Check for typosquatting (similar names to popular packages)
  package_reputation: true    # Check package reputation (age, downloads, etc.)
  dependency_chain: true      # Analyze full dependency chain
  visualization: true         # Generate dependency visualizations
  llm_enhanced: true          # Use LLM for enhanced analysis and recommendations

# Security databases
security:
  nvd:
    enabled: true             # National Vulnerability Database
    api_key: null             # Optional API key for higher rate limits
    cache_duration: 86400     # Cache results for 24 hours (in seconds)
  
  osv:
    enabled: true             # Open Source Vulnerabilities database
    cache_duration: 86400     # Cache results for 24 hours
  
  pypi:
    enabled: true             # Check PyPI for security advisories
    cache_duration: 43200     # Cache results for 12 hours

# LLM settings
llm:
  model: "mistralai/Mistral-7B-Instruct-v0.2"  # Default model to use
  offline_mode: false         # Fall back to basic analysis if True
  function_calling: true      # Use function calling for structured outputs

# File watcher settings
watcher:
  interval: 5                 # Check interval in seconds
  file_patterns:              # File patterns to watch
    - "requirements.txt"
    - "requirements/*.txt"
    - "Pipfile"
    - "Pipfile.lock"
    - "poetry.lock"
    - "pyproject.toml"
    - "environment.yml"
    - "environment.yaml"
    - "setup.py"
    - "setup.cfg"
    - "package.json"
  
  # Custom commands for specific file patterns
  file_commands:
    "requirements.txt": "python app.py --file {file} --output {output}"
    "requirements/*.txt": "python app.py --file {file} --output {output}"
    "Pipfile": "python app.py --file {file} --check-deps --output {output}"
    "Pipfile.lock": "python app.py --file {file} --check-deps --output {output}"
    "poetry.lock": "python app.py --file {file} --check-deps --output {output}"
    "pyproject.toml": "python app.py --file {file} --check-deps --output {output}"
    "environment.yml": "python app.py --file {file} --output {output}"
    "environment.yaml": "python app.py --file {file} --output {output}"
    "setup.py": "python app.py --file {file} --check-deps --output {output}"
    "setup.cfg": "python app.py --file {file} --output {output}"
    "package.json": "python app.py --file {file} --js --output {output}"

# Output settings
output:
  report_dir: "./security_reports"  # Directory to store security reports
  report_format: "markdown"         # Report format (markdown or json)
  include_timestamp: true           # Include timestamp in report filename
  visualization_format: "png"       # Format for dependency visualizations

# Severity thresholds
severity:
  critical_threshold: 9.0     # CVSS score threshold for Critical severity
  high_threshold: 7.0         # CVSS score threshold for High severity
  medium_threshold: 4.0       # CVSS score threshold for Medium severity
  low_threshold: 0.1          # CVSS score threshold for Low severity

# Typosquatting detection
typosquatting:
  similarity_threshold: 0.8   # Text similarity threshold (0.0-1.0)
  popular_packages_count: 1000 # Number of popular packages to check against
  keyboard_adjacency: true    # Check for keyboard adjacency typos

# Package reputation
reputation:
  # Thresholds for reputation metrics
  new_package_days: 30        # Consider packages younger than this as "new"
  low_download_threshold: 1000 # Threshold for low download count
  low_star_threshold: 10      # Threshold for low GitHub stars

# API rate limiting
rate_limits:
  nvd_requests_per_minute: 10  # NVD API rate limit
  pypi_requests_per_minute: 30 # PyPI API rate limit
  github_requests_per_minute: 30 # GitHub API rate limit